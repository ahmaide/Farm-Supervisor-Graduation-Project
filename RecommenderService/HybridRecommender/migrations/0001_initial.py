# Generated by Django 4.1.12 on 2023-11-12 21:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CaringMethod',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('description', models.CharField(max_length=120)),
                ('lowerAge', models.IntegerField()),
                ('upperAge', models.IntegerField()),
                ('startMonth', models.IntegerField()),
                ('endMonth', models.IntegerField()),
            ],
            options={
                'db_table': 'caringMethod',
            },
        ),
        migrations.CreateModel(
            name='Cure',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=200)),
                ('times', models.IntegerField()),
                ('period', models.CharField(max_length=5)),
            ],
            options={
                'db_table': 'cure',
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('causes', models.CharField(max_length=100)),
                ('caringMethods', models.ManyToManyField(to='HybridRecommender.caringmethod')),
                ('cures', models.ManyToManyField(to='HybridRecommender.cure')),
            ],
            options={
                'db_table': 'disease',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('avgHumidity', models.FloatField()),
                ('avgHeight', models.FloatField()),
                ('locationType', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'location',
            },
        ),
        migrations.CreateModel(
            name='PlantType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('description', models.CharField(max_length=80)),
            ],
            options={
                'db_table': 'plantType',
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('description', models.CharField(max_length=100)),
                ('percentage', models.IntegerField()),
            ],
            options={
                'db_table': 'symptom',
            },
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
            ],
            options={
                'db_table': 'tool',
            },
        ),
        migrations.CreateModel(
            name='WeatherCondition',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('lowerTemp', models.IntegerField()),
                ('upperTemp', models.IntegerField()),
                ('caringMethods', models.ManyToManyField(to='HybridRecommender.caringmethod')),
            ],
            options={
                'db_table': 'weatherCondition',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=40)),
                ('caringMethods', models.ManyToManyField(to='HybridRecommender.caringmethod')),
                ('diseases', models.ManyToManyField(to='HybridRecommender.disease')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='HybridRecommender.location')),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Pest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('pestInfo', models.CharField(max_length=80)),
                ('startMonth', models.IntegerField()),
                ('endMonth', models.IntegerField()),
                ('caringMethods', models.ManyToManyField(to='HybridRecommender.caringmethod')),
                ('cures', models.ManyToManyField(to='HybridRecommender.cure')),
                ('symptoms', models.ManyToManyField(to='HybridRecommender.symptom')),
            ],
            options={
                'db_table': 'pest',
            },
        ),
        migrations.AddField(
            model_name='disease',
            name='symptoms',
            field=models.ManyToManyField(to='HybridRecommender.symptom'),
        ),
        migrations.AddField(
            model_name='cure',
            name='tools',
            field=models.ManyToManyField(to='HybridRecommender.tool'),
        ),
        migrations.AddField(
            model_name='caringmethod',
            name='plantTypes',
            field=models.ManyToManyField(to='HybridRecommender.planttype'),
        ),
        migrations.AddField(
            model_name='caringmethod',
            name='tools',
            field=models.ManyToManyField(to='HybridRecommender.tool'),
        ),
    ]
